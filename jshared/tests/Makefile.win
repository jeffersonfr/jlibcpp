AR			= ar
CC			= g++
JAVA		= javac

DEVCPP = d:/Dev-Cpp

TARGET_ARCH = linux

OPT    		= -fomit-frame-pointer -funroll-loops -march=i686 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -O2
DEBUG  		= -ggdb 
OTHER  		= -Wall  

INCLUDE		= -I. -I../include -Iinclude -I$(DEVCPP)/include -I$(DEVCPP)/include -I$(DEVCPP)/include/c++ -I$(DEVCPP)/include/c++/mingw32  -I$(DEVCPP)/include/c++/backward  -I$(DEVCPP)/include 
LIBRARY 	= -L. -L../lib -L$(DEVCPP)/lib -ljsocket

STD			= _GNU_SOURCE

CCFLAGS		= $(INCLUDE) $(DEBUG) $(OPT) $(OTHER) -D$(STD)

OBJS_proxy_teste = \
	   proxy_teste.o\

OBJS_opt_teste = \
	   opt_teste.o\

OBJS_http_teste = \
	   http_teste.o\

OBJS_dump_teste = \
	   dump_teste.o\

OBJS_udp_teste = \
	   udp_teste.o\

OBJS_server_teste = \
	   server_teste.o\

all: proxy_teste opt_teste http_teste dump_teste udp_teste server_teste
	
proxy_teste: $(OBJS_proxy_teste)
	$(CC) $(CCFLAGS) $(OBJS_proxy_teste) -o proxy_teste $(LIBRARY)  

opt_teste: $(OBJS_opt_teste)
	$(CC) $(CCFLAGS) $(OBJS_opt_teste) -o opt_teste $(LIBRARY)  

http_teste: $(OBJS_http_teste)
	$(CC) $(CCFLAGS) $(OBJS_http_teste) -o http_teste $(LIBRARY)  

dump_teste: $(OBJS_dump_teste)
	$(CC) $(CCFLAGS) $(OBJS_dump_teste) -o dump_teste $(LIBRARY)  

udp_teste: $(OBJS_udp_teste)
	$(CC) $(CCFLAGS) $(OBJS_udp_teste) -o udp_teste $(LIBRARY)  

server_teste: $(OBJS_server_teste)
	$(CC) $(CCFLAGS) $(OBJS_server_teste) -o server_teste $(LIBRARY)  

.cpp.o: $<  
	$(CC) $(CCFLAGS) -c $< 

install:

clean:
	rm -rvf *.o *~ proxy_teste.exe opt_teste.exe http_teste.exe dump_teste.exe udp_teste.exe server_teste.exe jsocket.dll
